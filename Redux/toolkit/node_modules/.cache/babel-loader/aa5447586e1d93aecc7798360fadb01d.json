{"ast":null,"code":"// const initialState = {\n//     articles: [],\n//     remoteArticles: []\n//   };\n//const { fetchData } = require(\"../Containers/Users\");\n//   function rootReducer(state = initialState, action) {\n//     if (action.type === \"DATA_LOADED\") {\n//       return Object.assign({}, state, {\n//         remoteArticles: state.remoteArticles.concat(action.payload)\n//       });\n//     }\n//     return state;\n//   }\n//   export default rootReducer;\n// import {FETCH_USERS} from '../Containers/Users';\n// const userReducer = (state = {}, {type, payload}) => {\n//     switch(type) {\n//         case FETCH_USERS :\n//         return payload\n//         default :\n//     return state\n// };\n// };\n// export default userReducer;\n// const intialState = {\n//   num: 0,\n//   data: null,\n//   error: \"\"\n// }\n// const reducer = (state = intialState, action) => {\n//   switch (action.type) {\n//       case \"INCREMENT\":\n//           return { ...state, num: state.num + 1 }\n//       case \"FetchData\":\n//           return { ...state, data: action.data }\n//       case \"ERROR\":\n//           return { ...state, error: action.msg }\n//       default:\n//           return state\n//         }\n//       }\n//       export default reducer\n// const initialState={\n//   users:[]\n// }\n// const reducer = (state ={initialState},{type,payload}) => {\n//   switch(type){\n//     case fetchData:\n//       return payload\n//       default:\n//         return state\n//   };\n// };\n// export default reducer;\nvar initialState={remoteArticles:[]};// const reducer = (state = intialState, action) => {\n//   switch (action.type) {\n//       case \"DATA_LOADED\":\n//           return {...state,remoteArticles:action.remoteArticles}\n//       default:\n//           return state\n//   }\n// }\n// export default reducer;\nfunction reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;if(action.type===\"DATA_LOADED\"){return Object.assign({},state,{remoteArticles:state.remoteArticles.concat(action.data)});}return state;}export default reducer;","map":{"version":3,"sources":["C:/Users/Abhishek/Desktop/production server with webpack redux 1/src/reducers/index.js"],"names":["initialState","remoteArticles","reducer","state","action","type","Object","assign","concat","data"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,GAAMA,CAAAA,YAAY,CAAG,CAEnBC,cAAc,CAAC,EAFI,CAArB,CAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA,QAASC,CAAAA,OAAT,EAA+C,IAA9BC,CAAAA,KAA8B,2DAAtBH,YAAsB,IAARI,CAAAA,MAAQ,2CAC7C,GAAIA,MAAM,CAACC,IAAP,GAAgB,aAApB,CAAmC,CACjC,MAAOC,CAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBJ,KAAlB,CAAyB,CAC9BF,cAAc,CAAEE,KAAK,CAACF,cAAN,CAAqBO,MAArB,CAA4BJ,MAAM,CAACK,IAAnC,CADc,CAAzB,CAAP,CAGD,CACD,MAAON,CAAAA,KAAP,CACD,CAED,cAAeD,CAAAA,OAAf","sourcesContent":["// const initialState = {\r\n//     articles: [],\r\n//     remoteArticles: []\r\n//   };\r\n\r\n//const { fetchData } = require(\"../Containers/Users\");\r\n\r\n//   function rootReducer(state = initialState, action) {\r\n//     if (action.type === \"DATA_LOADED\") {\r\n//       return Object.assign({}, state, {\r\n//         remoteArticles: state.remoteArticles.concat(action.payload)\r\n//       });\r\n//     }\r\n//     return state;\r\n//   }\r\n  \r\n//   export default rootReducer;\r\n\r\n// import {FETCH_USERS} from '../Containers/Users';\r\n// const userReducer = (state = {}, {type, payload}) => {\r\n//     switch(type) {\r\n//         case FETCH_USERS :\r\n//         return payload\r\n//         default :\r\n//     return state\r\n// };\r\n// };\r\n// export default userReducer;\r\n\r\n\r\n// const intialState = {\r\n//   num: 0,\r\n//   data: null,\r\n//   error: \"\"\r\n// }\r\n\r\n// const reducer = (state = intialState, action) => {\r\n\r\n//   switch (action.type) {\r\n//       case \"INCREMENT\":\r\n//           return { ...state, num: state.num + 1 }\r\n//       case \"FetchData\":\r\n//           return { ...state, data: action.data }\r\n//       case \"ERROR\":\r\n//           return { ...state, error: action.msg }\r\n//       default:\r\n//           return state\r\n\r\n//         }\r\n\r\n//       }\r\n      \r\n      \r\n//       export default reducer\r\n\r\n\r\n\r\n\r\n// const initialState={\r\n//   users:[]\r\n// }\r\n// const reducer = (state ={initialState},{type,payload}) => {\r\n//   switch(type){\r\n//     case fetchData:\r\n//       return payload\r\n//       default:\r\n//         return state\r\n//   };\r\n// };\r\n\r\n// export default reducer;\r\n\r\n\r\nconst initialState = {\r\n \r\n  remoteArticles:[]\r\n}\r\n\r\n// const reducer = (state = intialState, action) => {\r\n\r\n//   switch (action.type) {\r\n//       case \"DATA_LOADED\":\r\n//           return {...state,remoteArticles:action.remoteArticles}\r\n//       default:\r\n//           return state\r\n//   }\r\n\r\n// }\r\n\r\n\r\n// export default reducer;\r\n\r\nfunction reducer(state = initialState, action) {\r\n  if (action.type === \"DATA_LOADED\") {\r\n    return Object.assign({}, state, {\r\n      remoteArticles: state.remoteArticles.concat(action.data)\r\n    });\r\n  }\r\n  return state;\r\n}\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}