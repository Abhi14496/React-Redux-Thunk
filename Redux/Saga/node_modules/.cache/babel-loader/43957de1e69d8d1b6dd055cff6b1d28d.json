{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Abhishek\\\\Desktop\\\\Redux saga\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";// import { put, takeEvery, all, call,takeLatest } from 'redux-saga/effects'\n//export const LOAD_USERS_LOADING = 'LOAD_USERS_LOADING';\n// export const LOAD_USERS_SUCCESS = 'LOAD_USERS_SUCCESS';\n// export const LOAD_USERS_ERROR = 'LOAD_USERS_ERROR';\n// function* fetchUser() {\n//    try {\n//        const users = yield fetch('/details');\n//        yield put({type: LOAD_USERS_SUCCESS, users});\n//    } catch (e) {\n//        yield put({type: LOAD_USERS_ERROR, error: e.message});\n//    }\n// }\n// export function* usersSaga() {\n// yield takeEvery(LOAD_USERS_LOADING,fetchUser );\n// }\n// export default usersSaga;\n// export function* fetchToDoList() {\n//     const endpoint = '/details';\n//     const response = yield call(fetch, endpoint);\n//     const data = yield response.json();\n//     yield put({ type: LOAD_USERS_ERROR, data: data });\n//   }\n//   export function*loadUsers() {\n//     yield takeEvery( LOAD_USERS_SUCCESS, fetchToDoList);\n//   }\n//   export default function* usersSaga() {\n//     yield all([loadUsers()]);\n//   }\nimport{takeEvery}from'redux-saga/effects';var addMessage=function addMessage(message,author){return{type:'ADD_MESSAGE',message:message,author:author};};var handleNewMessage=/*#__PURE__*/_regeneratorRuntime.mark(function handleNewMessage(params){var socket;return _regeneratorRuntime.wrap(function handleNewMessage$(_context){while(1){switch(_context.prev=_context.next){case 0:socket=new WebSocket('/details');_context.next=3;return takeEvery('ADD_MESSAGE',function(action){socket.send(JSON.stringify(action));});case 3:case\"end\":return _context.stop();}}},handleNewMessage);});export default handleNewMessage;","map":{"version":3,"sources":["C:/Users/Abhishek/Desktop/Redux saga/src/action/index.js"],"names":["takeEvery","addMessage","message","author","type","handleNewMessage","params","socket","WebSocket","action","send","JSON","stringify"],"mappings":"2JAAA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA,OAASA,SAAT,KAA0B,oBAA1B,CACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,OAAD,CAAUC,MAAV,QAAsB,CACrCC,IAAI,CAAE,aAD+B,CAErCF,OAAO,CAAPA,OAFqC,CAGrCC,MAAM,CAANA,MAHqC,CAAtB,EAAnB,CAME,GAAME,CAAAA,gBAAgB,uCAAG,QAAUA,CAAAA,gBAAV,CAA2BC,MAA3B,sIACjBC,MADiB,CACR,GAAIC,CAAAA,SAAJ,CAAc,UAAd,CADQ,iBAEvB,MAAMR,CAAAA,SAAS,CAAC,aAAD,CAAgB,SAACS,MAAD,CAAY,CACzCF,MAAM,CAACG,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAZ,EACD,CAFc,CAAf,CAFuB,4CAAUJ,gBAAV,GAAH,CAAtB,CAOF,cAAeA,CAAAA,gBAAf","sourcesContent":["// import { put, takeEvery, all, call,takeLatest } from 'redux-saga/effects'\r\n\r\n//export const LOAD_USERS_LOADING = 'LOAD_USERS_LOADING';\r\n// export const LOAD_USERS_SUCCESS = 'LOAD_USERS_SUCCESS';\r\n// export const LOAD_USERS_ERROR = 'LOAD_USERS_ERROR';\r\n\r\n\r\n\r\n\r\n\r\n// function* fetchUser() {\r\n//    try {\r\n//        const users = yield fetch('/details');\r\n//        yield put({type: LOAD_USERS_SUCCESS, users});\r\n//    } catch (e) {\r\n//        yield put({type: LOAD_USERS_ERROR, error: e.message});\r\n//    }\r\n// }\r\n// export function* usersSaga() {\r\n// yield takeEvery(LOAD_USERS_LOADING,fetchUser );\r\n// }\r\n// export default usersSaga;\r\n\r\n\r\n// export function* fetchToDoList() {\r\n//     const endpoint = '/details';\r\n//     const response = yield call(fetch, endpoint);\r\n//     const data = yield response.json();\r\n//     yield put({ type: LOAD_USERS_ERROR, data: data });\r\n//   }\r\n  \r\n//   export function*loadUsers() {\r\n//     yield takeEvery( LOAD_USERS_SUCCESS, fetchToDoList);\r\n//   }\r\n  \r\n//   export default function* usersSaga() {\r\n//     yield all([loadUsers()]);\r\n//   }\r\n\r\nimport { takeEvery } from 'redux-saga/effects'\r\nconst addMessage = (message, author) => ({\r\n    type: 'ADD_MESSAGE',\r\n    message,\r\n    author\r\n  })\r\n\r\n  const handleNewMessage = function* handleNewMessage(params) {\r\n    const socket = new WebSocket('/details')\r\n    yield takeEvery('ADD_MESSAGE', (action) => {\r\n      socket.send(JSON.stringify(action))\r\n    })\r\n  }\r\n  \r\nexport default handleNewMessage"]},"metadata":{},"sourceType":"module"}